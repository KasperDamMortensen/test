import java.io.IOException;
import java.nio.file.*;
import java.text.BreakIterator;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;

public class Exam {
    public static void main(String[] args) {
        checkArguments(args.length > 0,
                "You must choose a command: help, uniqueWords, lineWithMostA, consonants, or substring.");
        switch (args[0]) {
            case "help":
                System.out.println(
                        "Available commands: help, uniqueWords, lineWithMostA, consonants, or substring.\nFor example, try:\n\tjava Exam uniqueWords data");
                break;
            case "uniqueWords":
                checkArguments(args.length == 2, "Usage: java Exam.java uniqueWords <directory>");
                List<LocatedWord> uniqueWords = findWordsUniqueToALine(Paths.get(args[1]));
                System.out.println("Found " + uniqueWords.size() + " words");
                uniqueWords.forEach(locatedWord -> System.out.println(locatedWord.word + ":" + locatedWord.filepath + ":" + locatedWord.line));
                break;
            case "lineWithMostA":
                checkArguments(args.length == 2, "Usage: java Exam.java lineWithMostA <directory>");
                Location location = lineWithMostA(Paths.get(args[1]));
                System.out.println("Line with most occurrences of A found at " + location.filepath + ":" + location.line);
                break;
            case "consonants":
                checkArguments(args.length == 3, "Usage: java Exam.java consonants <directory> <consonants>");
                int consonants = Integer.parseInt(args[2]);
                Optional<LocatedWord> word = wordWithConsonants(Paths.get(args[1]), consonants);
                word.ifPresentOrElse(
                        locatedWord -> System.out.println("Found " + locatedWord.word + " in " + locatedWord.filepath + ":" + locatedWord.line),
                        () -> System.out.println("No word found with " + args[2] + " consonants."));
                break;
            case "substring":
                checkArguments(args.length == 4, "Usage: java Exam.java substring <directory> <substring> <length>");
                int length = Integer.parseInt(args[3]);
                List<LocatedWord> words = wordsWithSubstring(Paths.get(args[1]), args[2], length);
                if (words.size() > length) {
                    System.out.println("WARNING: Implementation of wordsWithSubstring computes more than " + args[3] + " words!");
                }
                words.forEach(loc -> System.out.println(loc.word + ":" + loc.filepath + ":" + loc.line));
                break;
            default:
                System.out.println("Unrecognised command: " + args[0] + ". Try java Exam.java help.");
                break;
        }
    }

    private static void checkArguments(Boolean check, String message) {
        if (!check) {
            throw new IllegalArgumentException(message);
        }
    }

    private static List<LocatedWord> findWordsUniqueToALine(Path dir) {
        try {
            ForkJoinPool forkJoinPool = new ForkJoinPool();
            return forkJoinPool.submit(() -> {
                return Files.walk(dir)
                        .filter(Files::isRegularFile)
                        .filter(path -> path.toString().endsWith(".txt"))
                        .parallel()
                        .flatMap(path -> processFileForUniqueWords(path).stream())
                        .collect(Collectors.toList());
            }).get();
        } catch (IOException | InterruptedException | ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    private static List<LocatedWord> processFileForUniqueWords(Path path) {
        List<LocatedWord> uniqueWords = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(path);
            Map<String, Integer> wordCount = new HashMap<>();
            Map<String, Integer> wordLine = new HashMap<>();

            for (int i = 0; i < lines.size(); i++) {
                String line = lines.get(i);
                BreakIterator iterator = BreakIterator.getWordInstance();
                iterator.setText(line);
                int start = iterator.first();
                for (int end = iterator.next(); end != BreakIterator.DONE; start = end, end = iterator.next()) {
                    String word = line.substring(start, end).toLowerCase();
                    if (Character.isLetterOrDigit(word.charAt(0))) {
                        wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
                        wordLine.put(word, i);
                    }
                }
            }

            wordCount.forEach((word, count) -> {
                if (count == 1) {
                    uniqueWords.add(new LocatedWord(word, wordLine.get(word), path));
                }
            });
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return uniqueWords;
    }

    private static Location lineWithMostA(Path dir) {
        try {
            return Files.walk(dir)
                    .filter(Files::isRegularFile)
                    .filter(path -> path.toString().endsWith(".txt"))
                    .parallel()
                    .flatMap(path -> processFileForMostA(path).stream())
                    .max(Comparator.comparingInt(loc -> loc.line))
                    .orElseThrow();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static List<Location> processFileForMostA(Path path) {
        List<Location> locations = new ArrayList<>();
        try {
            List<String> lines = Files.readAllLines(path);

            for (int i = 0; i < lines.size(); i++) {
                String line = lines.get(i);
                long count = line.chars().filter(ch -> ch == 'a' || ch == 'A').count();
                locations.add(new Location(path, i, (int) count));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return locations;
    }

    private static Optional<LocatedWord> wordWithConsonants(Path dir, int numberOfConsonants) {
        ExecutorService executorService = Executors.newCachedThreadPool();
        try {
            List<Callable<Optional<LocatedWord>>> tasks = Files.walk(dir)
                    .filter(Files::isRegularFile)
                    .filter(path -> path.toString().endsWith(".txt"))
                    .map(path -> (Callable<Optional<LocatedWord>>) () -> processFileForConsonants(path, numberOfConsonants))
                    .collect(Collectors.toList());

            List<Future<Optional<LocatedWord>>> results = executorService.invokeAll(tasks);
            for (Future<Optional<LocatedWord>> result : results) {
                Optional<LocatedWord> word = result.get();
                if (word.isPresent()) {
                    return word;
                }
            }
        } catch (IOException | InterruptedException | ExecutionException e) {
            throw new RuntimeException(e);
        } finally {
            executorService.shutdown();
        }
        return Optional.empty();
    }

    private static Optional<LocatedWord> processFileForConsonants(Path path, int numberOfConsonants) {
        try {
            List<String> lines = Files.readAllLines(path);
            for (int i = 0; i < lines.size(); i++) {
                String line = lines.get(i);
                BreakIterator iterator = BreakIterator.getWordInstance();
                iterator.setText(line);
                int start = iterator.first();
                for (int end = iterator.next(); end != BreakIterator.DONE; start = end, end = iterator.next()) {
                    String word = line.substring(start, end);
                    if (isWord(word) && countConsonants(word) == numberOfConsonants) {
                        return Optional.of(new LocatedWord(word, i, path));
                    }
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return Optional.empty();
    }

    private static boolean isWord(String text) {
        return text.chars().allMatch(Character::isLetter);
    }

    private static int countConsonants(String word) {
        return (int) word.toLowerCase().chars().filter(c -> "bcdfghjklmnpqrstvwxyz".indexOf(c) != -1).count();
    }

    private static List<LocatedWord> wordsWithSubstring(Path dir, String substring, int limit) {
        try {
            ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();
            List<LocatedWord> result = Collections.synchronizedList(new ArrayList<>());
            List<Callable<Void>> tasks = Files.walk(dir)
                    .filter(Files::isRegularFile)
                    .filter(path -> path.toString().endsWith(".txt"))
                    .map(path -> (Callable<Void>) () -> {
                        processFileForSubstring(path, substring, limit
