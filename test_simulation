import city_generator 
import city as c
import individual
import math
import event_queue
import population
import event
import random


def simulation():
    """ """
    
    filename=input('what is the name of the file containing the cities; ')
    N=ask_N()
    N_max=ask_Nmax()
    M=ask_M()
    R=ask_R()
    D=ask_D()
    omega=ask_omega()
    time=float(input('Write the total simulation time; '))
    mode=ask_mode()
    if mode==1:
        printing_interval=float(input('time units or events depending on the choosen mode; '))
    if mode==2:
        printing_interval=int(input('time units or events depending on the choosen mode; '))
    else: printing_interval=0
        
    i=0
    cities=city_generator.read_cities(filename)
    P=population.make_population(omega)
    while N>i:#creates a population with N individuals 
        ind=individual.make_individual(cities)
        population.add(ind,P)
        i=i+1
    
    j=0
    EQ=event_queue.make_queue()
    while N>j:#the loop creates 3 events for each individual
        
        event_mutation=make_event_mutation(M,P,P.members[j])
        event_queue.add(event_mutation,EQ)
        
        event_reproduction=make_event_reproduction(R,P,P.members[j],N,N_max)
        event_queue.add(event_reproduction,EQ)

        event_death=make_event_death(D,P,P.members[j])
        event_queue.add(event_death,EQ)
        j=j+1
 
    next_event=event_queue.next(EQ)
    current_time=event.time_of(next_event)
    events_simulated=0
    best_path=population.best(P)
    while event_queue.has_next(EQ) and time>current_time and population.size(P)>0:

        if N>N_max:
            population.epidemic(P)

        if next_event.eventtype=="Death":
            if (1-population.fitness(next_event.i,P)**2)>random.random():
                P.members.remove(next_event.i)
            else: 
                event_death=make_event_death(D,P,next_event.i,current_time)
                event_queue.add(event_death,EQ)
                
        if next_event.eventtype=="Mutation":
            if (1-population.fitness(next_event.i,P)**2)>random.random():
                individual.mutate(next_event.i)
                if random.random()>0.7:
                    individual.mutate(next_event.i)
                    if random.random()>0.85:
                        individual.mutate(next_event.i)
                event_mutation=make_event_mutation(M,P,next_event.i,1,current_time)
                event_queue.add(event_mutation,EQ)
            else:
                event_mutation=make_event_mutation(M,P,next_event.i,10,current_time)
                event_queue.add(event_mutation,EQ)
                
        if next_event.eventtype=="reproduction":
            reproduced_individual=individual.reproduce(next_event.i)
            population.add(reproduced_individual,P)
                
            event_mutation=make_event_mutation(M,P,reproduced_individual,current_time)
            event_queue.add(event_mutation,EQ)
        
            event_reproduction=make_event_reproduction(R,P,reproduced_individual,N,N_max,current_time)
            event_queue.add(event_reproduction,EQ)

            event_death=make_event_death(D,P,reproduced_individual,1,current_time)
            event_queue.add(event_death,EQ)

        if individual.cost(best_path)>individual.cost(population.best(P)):
            best_path=population.best(P).path[:]
        path_clean(P)
        current_time=next_event.time
        cost=individual.cost(best_path)



        n=printing_interval
        events_simulated=events_simulated+1 
        if (mode==1 and current_time>(n*printing_interval)):
            print(f'Current time: {current_time}')
            print(f'Events simulated: {events_simulated}')
            print(f'best path found: {path_clean(P)}'+f' With cost: {cost}\n')
            n=n+printing_interval
            
        if (mode==2 and events_simulated==(n*printing_interval)):
            print(f'Current time: {current_time}')
            print(f'Events simulated: {events_simulated}')
            print(f'best path found: {path_clean(P)}'+f' With cost: {cost}\n')
            n=n+1
            
        if mode==3:
            print(f'Current time: {current_time}')
            print(f'Events simulated: {events_simulated}')
            print(f'best path found: {path_clean(P)}'+f' With cost: {cost}\n')
            
            
        next_event=event_queue.next(EQ)
        
    print('Simulation terminated:\n'+f'best path found: {path_clean(P)}'+f' With cost: {cost}')

def path_clean(P: population)->list:
    """cleans up the path for output """
    
    list=[]
    j=0
    ind=population.best(P)
    while j<len(ind.path):
        city=ind.path[j].name
        list.append(city)
        j=j+1
    return list
    
def make_event_death(D: float,P: population, ind: individual,time: float=0)->event:
    """creates a death event for the individual, and puts it in the eventqueue """
    time_d=random.expovariate(D/(1-math.log(1-population.fitness(ind,P))))
    time_d=time_d+time
    event_death=event.make_event("Death",time_d,ind)
    return event_death

def make_event_reproduction(R: float, P: population, ind: individual,N: int, N_max: int,time: float=0)->event:
    """ """
    time_r=random.expovariate((N_max/N)*(R/(1-math.log(population.fitness(ind,P)))))
    time_r=time_r+time
    event_reproduction=event.make_event("Reproduction",time_r,ind)
    return event_reproduction

def make_event_mutation(M: float, P: population, ind: individual,x: int=1,time: float=0):
    """ """
    time_m=random.expovariate(x*M/(1-math.log(population.fitness(ind,P))))
    time_m=time_m+time
    event_mutation=event.make_event("Mutation",time_m,ind)
    return event_mutation
        
def ask_N()->int:
    """asks the user for initial size of the population """
    N=input('Write the initial size of the population; ')
    try:
        if int(N)>0:
            return int(N)
        else:
            print('The provided value is not a positive integer')
            return ask_N()
    except ValueError:
        print ('The provided value is not a integer')
        return ask_N()
    
def ask_D()->float:
    """asks the user for the death interval normalization term"""
    D=input('Write the death interval normalization term; ')
    try:
        if float(D)>0:    
            return float(D)
        else:
            print('The provided Value is not a positive float')
            return ask_D
    except ValueError:
        print('The provided Value is not a float')
        return ask_D

def ask_Nmax()->int:
    """asks the user for the max population size wtih no epidemics """
    N_max=input('Write the maximum population where no epidemics take place; ')
    try:
        if int(N_max)>0:
            return int(N_max)
        else:
            print('The provided value is not a positive integer')
            return ask_Nmax
    except ValueErrror:
        print('The provided Value is not an integer')
        return ask_Nmax()
    
def ask_M()->float:
    """asks the user for the mutation interval normalization term M"""
    M=input('Write the mutation interval normalization term; ')
    try:
        if float(M)>0:    
            return float(M)
        else:
            print('The provided Value is not a positive float')
            return ask_M
    except ValueError:
        print('The provided Value is not a float')
        return ask_M
    
def ask_R()->float:
    """asks the user for the reproduction interval normalization term R"""
    R=input('Write the reproduction interval normalization term; ')
    try:
        if float(R)>0:    
            return float(R)
        else:
            print('The provided value is not a positive float')
            return ask_R
    except ValueError:
        print('The provided value is not a float')
        return ask_R
    
def ask_omega()->float:
    """asks the user the comfort normalization term omega"""
    
    omega=input('Write the comfort normalization term; ')
    try:
        if float(omega)>0:    
            return float(omega)
        else:
            print('The provided Value is not a positive float')
            return ask_omega
    except ValueError:
        print('The provided value is not a float')
        return ask_R
    
def ask_time()->float:
    """asks the user the total simulation time"""
    
    time=input('Write the total simulation time; ')
    try:
        if float(time)>0:    
            return float(time)
        else:
            print('The provided Value is not a positive float')
            return ask_time
    except ValueError:
        print('The provided Value is not a float')
        return ask_time
    
def ask_mode():
    """asks the user for the mode of simulation """
    
    print('the simulation can run in these four modes:\n 1: report every t units of time \n 2: report every n events \n 3: verboese: report everything \n 4: silent: report at the end  ')
    mode=input('what mode should the simulation run in; ')
    try:
        if 5>int(mode)>0:
            return int(mode)
        else:
            print('The provided value is not an option')
    except ValueError:
        print('The provided value is not an option')
        return ask_mode()

